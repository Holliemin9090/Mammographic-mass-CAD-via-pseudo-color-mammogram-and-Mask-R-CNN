clc,clear,close all;

set_idx = '5';
image_path = 'scans\pseudo_color_image\';%The path of pseudo-color images
ground_truth_path = 'scans\preprocessed_mask1\';% The path of annotation mask
seg_msk = 'scans\seg_mask\';%MMS_method Gray_method
save_overlay_path = 'scans\seg_mask_overlay\';% your folder you want to save the overlay results in
if ~exist(save_overlay_path,'dir')
    mkdir(save_overlay_path);
end


image_names = Read_files_in_folder( image_path, 'files' );% Read the names of the images
GT_names = Read_files_in_folder( ground_truth_path, 'files' );% Read the names of the ground truth files
seg_msk_names = Read_files_in_folder( seg_msk, 'files' );% Read the names of the segmentation masks generated by the Mask R-CNN

num_lesions = 0;% Total number of lesions
num_tps = 0;% Number of true positives
num_fps = 0;% Number of false positives
All_dice = [];% Dice similarity index matrix
for i = 1:length(image_names)
    close all;
    image = imread(strcat(image_path,image_names{i}));
    
    fig=figure;
    imshow(image);
    
    
    %% overlay the groundtruth on the mammograms
    all_anno = {};
    if_normal = 0;% check if this is a normal breast
    for j = 1:length(GT_names)
        if ~isempty(strfind(GT_names{j},image_names{i}(1:end-4)))
            msk = imread(strcat(ground_truth_path,GT_names{j}));
            if max(msk(:))==0
                if_normal=1;
            end
            [ ~ ] = m_boundray( msk,'k',3 );
            A = bwconncomp(msk);
            all_anno = cat(1,all_anno,A);
            
            num_lesions = num_lesions+A.NumObjects;
        end
        
    end
    
    %% overlay the segmentations on the mammograms
    all_detections = {};
    for j = 1:length(seg_msk_names)
        if ~isempty(strfind(seg_msk_names{j},image_names{i}(1:end-4)))
            msk = imread(strcat(seg_msk,seg_msk_names{j}));
            [ ~ ] = m_boundray( msk,'c',2 );
            B = bwconncomp(msk);
            all_detections = cat(1,all_detections,B);
        end
        
    end
    %% calculate the true positive rate and false positive rate
    [num_tp,num_fp,dice] = TPR_FPR(all_detections, all_anno);
    num_tps = num_tps+num_tp;
    num_fps = num_fps+num_fp;
    if if_normal ==0
        All_dice = cat(2,All_dice,dice);
    end
    Frame = getframe(fig);
    if if_normal == 0
        imwrite(Frame.cdata,strcat(save_overlay_path,image_names{i}));
    end
end

sensitivity = num_tps/num_lesions;
fp_per_image = num_fps/length(image_names);
mean_dice = mean(All_dice(All_dice>=0.2));
std_dice = std(All_dice(All_dice>=0.2));

disp(strcat('Sensitivity:', num2str(sensitivity)));
disp(strcat('False positive per image: ', num2str(fp_per_image)));
disp(strcat('Dice: ', num2str(mean_dice),'@',num2str(std_dice)));